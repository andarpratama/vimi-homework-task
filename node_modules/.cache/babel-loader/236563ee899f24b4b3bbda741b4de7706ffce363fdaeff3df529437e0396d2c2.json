{"ast":null,"code":"import dataList from '../constants/db.json';\nimport { formatData } from \"./formater\";\nexport const liveSearch = keyword => {\n  console.log(keyword);\n  const keywordAdvance = keyword.trim().split(\"is:\").slice(1);\n  console.log(keywordAdvance);\n  let isAdvanceSearch = keyword.includes(\"is:\");\n  let result = [];\n  if (isAdvanceSearch) {\n    const keywordAdvance = keyword.trim().split(\"is:\").slice(1);\n    for (const key of keywordAdvance) {\n      for (const list of dataList) {\n        if (list.status.toLowerCase() === key.toLowerCase()) {\n          result.push(list);\n        }\n      }\n    }\n    result = formatData(result);\n  } else {\n    for (var i = 0; i < dataList.length; i++) {\n      if (dataList[i].name.toLowerCase().includes(keyword.toLowerCase())) {\n        result.push(dataList[i]);\n      }\n    }\n  }\n  console.log(result);\n  return result;\n};","map":{"version":3,"names":["dataList","formatData","liveSearch","keyword","console","log","keywordAdvance","trim","split","slice","isAdvanceSearch","includes","result","key","list","status","toLowerCase","push","i","length","name"],"sources":["/home/andarpratama/Desktop/vimi-homework-task/src/utils/search.ts"],"sourcesContent":["import { IData } from \"../interfaces/IData\";\nimport VideoProjectServices from \"../services/VideoProjectService\";\nimport dataList from '../constants/db.json'\nimport { formatData } from \"./formater\";\n\nexport const liveSearch = (keyword:string) => {\n    console.log(keyword)\n    const keywordAdvance = keyword.trim().split(\"is:\").slice(1)\n    console.log(keywordAdvance)\n    let isAdvanceSearch = keyword.includes(\"is:\");\n    let result:any = []\n\n    if(isAdvanceSearch){\n        const keywordAdvance = keyword.trim().split(\"is:\").slice(1)\n        for (const key of keywordAdvance) {\n            for (const list of dataList) {\n                if(list.status.toLowerCase() === key.toLowerCase()){\n                    result.push(list)\n                }\n            }\n        }\n\n        result = formatData(result)\n    } else {\n        for (var i = 0; i < dataList.length; i++) {\n            if(dataList[i].name.toLowerCase().includes(keyword.toLowerCase())) {\n                result.push(dataList[i])\n            }\n        }\n    }\n\n    console.log(result)\n    return result\n}"],"mappings":"AAEA,OAAOA,QAAQ,MAAM,sBAAsB;AAC3C,SAASC,UAAU,QAAQ,YAAY;AAEvC,OAAO,MAAMC,UAAU,GAAIC,OAAc,IAAK;EAC1CC,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC;EACpB,MAAMG,cAAc,GAAGH,OAAO,CAACI,IAAI,EAAE,CAACC,KAAK,CAAC,KAAK,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC;EAC3DL,OAAO,CAACC,GAAG,CAACC,cAAc,CAAC;EAC3B,IAAII,eAAe,GAAGP,OAAO,CAACQ,QAAQ,CAAC,KAAK,CAAC;EAC7C,IAAIC,MAAU,GAAG,EAAE;EAEnB,IAAGF,eAAe,EAAC;IACf,MAAMJ,cAAc,GAAGH,OAAO,CAACI,IAAI,EAAE,CAACC,KAAK,CAAC,KAAK,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC;IAC3D,KAAK,MAAMI,GAAG,IAAIP,cAAc,EAAE;MAC9B,KAAK,MAAMQ,IAAI,IAAId,QAAQ,EAAE;QACzB,IAAGc,IAAI,CAACC,MAAM,CAACC,WAAW,EAAE,KAAKH,GAAG,CAACG,WAAW,EAAE,EAAC;UAC/CJ,MAAM,CAACK,IAAI,CAACH,IAAI,CAAC;QACrB;MACJ;IACJ;IAEAF,MAAM,GAAGX,UAAU,CAACW,MAAM,CAAC;EAC/B,CAAC,MAAM;IACH,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlB,QAAQ,CAACmB,MAAM,EAAED,CAAC,EAAE,EAAE;MACtC,IAAGlB,QAAQ,CAACkB,CAAC,CAAC,CAACE,IAAI,CAACJ,WAAW,EAAE,CAACL,QAAQ,CAACR,OAAO,CAACa,WAAW,EAAE,CAAC,EAAE;QAC/DJ,MAAM,CAACK,IAAI,CAACjB,QAAQ,CAACkB,CAAC,CAAC,CAAC;MAC5B;IACJ;EACJ;EAEAd,OAAO,CAACC,GAAG,CAACO,MAAM,CAAC;EACnB,OAAOA,MAAM;AACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}