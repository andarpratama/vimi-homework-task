{"ast":null,"code":"import dataList from '../constants/db.json';\nimport { formatData } from \"./formater\";\nexport const liveSearch = keyword => {\n  let isAdvanceSearch = keyword.includes(\"is:\");\n  let result = [];\n  if (isAdvanceSearch) {\n    const keywordAdvance = keyword.trim().split(\"is:\").slice(1);\n    // let group:any = []\n    keywordAdvance.forEach(key => {\n      // result.push(dataList.filter((data) => data.status.toLowerCase() === key.trim().toLowerCase()))\n      for (const data of dataList) {\n        if (data.status.toLowerCase() === key.trim().toLowerCase()) {\n          result.push(data);\n        }\n      }\n    });\n    // console.log('grup', group)\n    // result = formatData(result)\n  } else {\n    for (var i = 0; i < dataList.length; i++) {\n      if (dataList[i].name.toLowerCase().includes(keyword.toLowerCase())) {\n        result.push(dataList[i]);\n      }\n    }\n    // result = formatData(result)\n  }\n\n  console.log(result);\n  return formatData(result);\n};","map":{"version":3,"names":["dataList","formatData","liveSearch","keyword","isAdvanceSearch","includes","result","keywordAdvance","trim","split","slice","forEach","key","data","status","toLowerCase","push","i","length","name","console","log"],"sources":["/home/andarpratama/Desktop/vimi-homework-task/src/utils/search.ts"],"sourcesContent":["import dataList from '../constants/db.json'\nimport { formatData } from \"./formater\";\n\nexport const liveSearch = (keyword:string) => {\n    let isAdvanceSearch = keyword.includes(\"is:\");\n    let result:any = []\n\n    if(isAdvanceSearch){\n        const keywordAdvance = (keyword.trim().split(\"is:\").slice(1))\n        // let group:any = []\n        keywordAdvance.forEach(key => {\n            // result.push(dataList.filter((data) => data.status.toLowerCase() === key.trim().toLowerCase()))\n            for (const data of dataList) {\n                if(data.status.toLowerCase() === key.trim().toLowerCase()){\n                    result.push(data)\n                }\n            }\n        });\n        // console.log('grup', group)\n        // result = formatData(result)\n    } else {\n        for (var i = 0; i < dataList.length; i++) {\n            if(dataList[i].name.toLowerCase().includes(keyword.toLowerCase())) {\n                result.push(dataList[i])\n            }\n        }\n        // result = formatData(result)\n    }\n\n    console.log(result)\n    return formatData(result)\n}"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,sBAAsB;AAC3C,SAASC,UAAU,QAAQ,YAAY;AAEvC,OAAO,MAAMC,UAAU,GAAIC,OAAc,IAAK;EAC1C,IAAIC,eAAe,GAAGD,OAAO,CAACE,QAAQ,CAAC,KAAK,CAAC;EAC7C,IAAIC,MAAU,GAAG,EAAE;EAEnB,IAAGF,eAAe,EAAC;IACf,MAAMG,cAAc,GAAIJ,OAAO,CAACK,IAAI,EAAE,CAACC,KAAK,CAAC,KAAK,CAAC,CAACC,KAAK,CAAC,CAAC,CAAE;IAC7D;IACAH,cAAc,CAACI,OAAO,CAACC,GAAG,IAAI;MAC1B;MACA,KAAK,MAAMC,IAAI,IAAIb,QAAQ,EAAE;QACzB,IAAGa,IAAI,CAACC,MAAM,CAACC,WAAW,EAAE,KAAKH,GAAG,CAACJ,IAAI,EAAE,CAACO,WAAW,EAAE,EAAC;UACtDT,MAAM,CAACU,IAAI,CAACH,IAAI,CAAC;QACrB;MACJ;IACJ,CAAC,CAAC;IACF;IACA;EACJ,CAAC,MAAM;IACH,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjB,QAAQ,CAACkB,MAAM,EAAED,CAAC,EAAE,EAAE;MACtC,IAAGjB,QAAQ,CAACiB,CAAC,CAAC,CAACE,IAAI,CAACJ,WAAW,EAAE,CAACV,QAAQ,CAACF,OAAO,CAACY,WAAW,EAAE,CAAC,EAAE;QAC/DT,MAAM,CAACU,IAAI,CAAChB,QAAQ,CAACiB,CAAC,CAAC,CAAC;MAC5B;IACJ;IACA;EACJ;;EAEAG,OAAO,CAACC,GAAG,CAACf,MAAM,CAAC;EACnB,OAAOL,UAAU,CAACK,MAAM,CAAC;AAC7B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}